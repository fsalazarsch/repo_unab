# -*- coding: utf-8 -*-
"""apunte_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16i05MwjNJc7dwSCqrqb5E2YsCLahMCp7
"""

from scipy.stats import binom
import numpy
# 1-  algo es mayor que
#A LO MAS (MENOR O IGUAL)
binom.cdf(10,20,0.2)
#al menos (mayot o igual)
1 - binom.cdf(4,20,0.2) #al menos 5
#entre a y b  10 =< x <=15 y ESTAN CONFORMES
menor_que_15 = binom.cdf(15, 20, 0.8)
mayor_que_9 =  binom.cdf(9, 20, 0.8)
menor_que_15 - mayor_que_9

#si se sabe que al enos 3 no estan conformes, cual es la probabilida de menos de 15 no lo estén
# p( x < 15 /x>= 3 ) --> P(3 <= x < 15)
#                           p( x >= 3)

a =
b =
c =
(a-b)/c

#from statsmodels.distributions.empirical_distribution import  ECDF
from scipy.stats import poisson
#Poisson,
#x : numero de visitas x minuto
#landa --> 5

#a) probabilidad que en 3 minutos hayan 10 visitas
#p(x = 10)
real_lamda = 5*3
lamda = poisson(real_lamda)
x1 = lamda.cdf(10)
x2 = lamda.cdf(9)
x1-x2

lamda1 = poisson(25) #media por 5 minutos
x3 = lamda1.cdf(1) # menos de 2 visitas

#muestra maxima
lamda2 = %;
n = numpy.arrange(0,10)
y = poisson.pmf(n, lamda2)

import random
import numpy as np
from scipy.stats import binom
z = 10 #numero de veces que se hace algo
p = 0.04 #probabiiadad de exito

z_1 = np.arange(0, p +1, 10)
pListz = binom.pmf(z_1, z, p)
pListz #p(x>= 10)
1 - pListz

"""Hiper geometrica

```
x=  #baterias en buen estado
N = 9
k = 4
n = 3

ninguna (x = 0)
al menos una ( p >= 1)
no mas de 2 (p x < 2)
```


"""

from scipy.stats import hypergeom
#N,k,n
x = hypergeom(9,4,3)
x.cdf(0)

#p(x>= 1)
p_3 = 1 - x.cdf(0)
print(p_3)

x.cdf(2) #p x<=2

#Continua Exponencial
from scipy.stats import expon
expon.cdf(2.5, 0, 4)

# entre a y b miunmos y maximos a <= x <= b
# como son continuas a<=x es igual a<x    a < x < b

a = expon.cdf(1, 0, 4)
b = expon.cdf(3, 0, 4)

b-a

# p x>=3
1- expon.cdf(3, 0, 4)

#Distribucion  normal
from scipy.stats import norm
import random

i = 0
s = 0
while(i < 1000):
  r = random.gauss(8,0.5)
  if(r> 7):
    s += 1
  i += 1

print (s/1000)

#a) mas de 7 años
#a) menos de 8.5 de años

#Distribucion  normal
from scipy.stats import norm
import random
i = 0
s = 0
while(i < 1000):
  r = random.gauss(8,0.5)
  if(r < 8.5):
    s += 1
  i += 1

print (s/1000)

#a) mas de 7 años
#a) menos de 8.5 de años

#en un punto la porpabilidad exacta es cero

import random

#Distr binomial
#x : tiempo de espera
#enre las 10 y las 11
#de besperar a lo ams 10 mins x<=10
minimo = 0
maximo = 60
j = 0
k = 0

while(j < 1000):
  a = 0.0 +((maximo- 0) * random.random())
  b = 0.0 +((maximo- 0) * random.random())
  if(0.0 < a-b <= 10):
    k += 1
  if(0.0 < b-a <= 10):
    k += 1
  j += 1

print(k/1000)